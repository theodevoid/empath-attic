// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  Campaign             Campaign[]
  AccountabilityReport AccountabilityReport[]
  CampaignComment      CampaignComment[]
  CampaignPayment      CampaignPayment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CampaignStatus {
  ON_GOING
  CANCELLED
  DONE
}

model Campaign {
  id                   String                 @id @default(cuid())
  name                 String
  target_amount        Int
  total_accumulated    Int
  images               String[]
  description          String
  end_date             DateTime
  slug                 String
  is_owned_empathattic Boolean                @default(false)
  status               CampaignStatus         @default(ON_GOING)
  user                 User                   @relation(fields: [user_id], references: [id])
  category             Category               @relation(fields: [category_id], references: [id])
  created_at           DateTime               @default(now())
  user_id              String
  category_id          String
  AccountabilityReport AccountabilityReport[]
}

model Category {
  id       String     @id @default(cuid())
  name     String
  Campaign Campaign[]
}

model AccountabilityReport {
  id          String   @id @default(cuid())
  name        String
  description String
  images      String[]
  campaign    Campaign @relation(fields: [campaign_id], references: [id])
  campaign_id String
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
}

model CampaignComment {
  id      String @id @default(cuid())
  content String
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
}

model CampaignPayment {
  id             String   @id @default(cuid())
  amount         Int
  payment_method String
  user           User     @relation(fields: [user_id], references: [id])
  user_id        String
  created_at     DateTime @default(now())
}
